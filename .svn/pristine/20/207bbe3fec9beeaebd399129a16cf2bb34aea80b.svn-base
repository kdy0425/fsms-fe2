'use client'
import React, { useCallback, useEffect, useState } from 'react'
import {
  Box,
  Button,
} from '@mui/material'

import { BlankCard } from '@/utils/fsms/fsm/mui-imports'
import PageContainer from '@/components/container/PageContainer'

// components
import CustomFormLabel from '@/components/forms/theme-elements/CustomFormLabel'
import CustomTextField from '@/components/forms/theme-elements/CustomTextField'

// types
import { HeadCell, Pageable2 } from 'table'
import { getUserInfo} from '@/utils/fsms/utils'
import { sendHttpRequest } from '@/utils/fsms/common/apiUtils'

// 추후에 수정
import TableDataGrid from '@/app/components/tables/CommDataGrid2'
import DetailDataGrid from './DetailDataGrid'

import {
  getExcelFile,
  getToday,
} from '@/utils/fsms/common/comm'
import FormModal from './FormModal'
import {
  CommSelect,
  CtpvSelect,
  LocgovSelect,
} from '@/app/components/tx/commSelect/CommSelect'
import { getDateRange } from '@/utils/fsms/common/util'
import { LoadingBackdrop } from '@/app/components/loading/LoadingBackdrop'
import ConfirmModal from '../../../lttm/_components/Taxi/ConfirmModal'

const BCrumb = [
  {
    to: '/',
    title: 'Home',
  },
  {
    title: '기준관리',
  },
  {
    title: '자격관리',
  },
  {
    to: '/stn/ltmm',
    title: '지자체이관전출관리',
  },
]

export interface Row {
  ctpvCd?: string // 시도코드
  locgovCd?: string // 관할관청코드
  bgngDt?: string // 신청시작일자
  endDt?: string // 신청종료일자
  vhclNo?: string // 차량번호
  brno?: string // 사업자등록번호
  prcsYmd?: string // 요청일자
  bzentyNm?: string // 업체명
  chgLocgovNm?: string // 전입관청
  exsLocgovNm?: string // 전출관청
  locgovNm?: string // 요청관청
  prcsSttsNm?: string // 처리상태
  bzmnSeCd?: string // 면허업종(개인법인구분)
  rprsvNm?: string // 대표자명
  rprsvRrno?: string // 대표자 주민등록번호
  vhclSttsNm?: string // 차량상태
  koiNm?: string // 유종
  rfslRsnCn?: string // 거절사유
  rgtrId?: string // 등록자 아이디
  regDt?: string // 등록일자
  mdfrId?: string // 수정자 아이디
  mdfcnDt?: string // 수정일자
  aplySn?: string // 신청일련번호
  prcsSttsCd?: string // 이관요청상태
  chgLocgovCd?: string // 변경지자체 코드
  exsLocgovCd?: string
  dmndSeNm? : string

  bzmnSeNm?: string
  rprsvRrnoS?: string
  koiCd?: string
  regYmd?: string
  dmndSeCd?: string
}

const headCells: HeadCell[] = [
  {
    id: 'regYmd',
    numeric: false,
    disablePadding: false,
    label: '요청일자',
    format: 'yyyymmdd',
  },
  {
    id: 'brno',
    numeric: false,
    disablePadding: false,
    label: '사업자등록번호',
    format: 'brno',
  },
  {
    id: 'bzentyNm',
    numeric: false,
    disablePadding: false,
    label: '업체명',
  },
  {
    id: 'vhclNo',
    numeric: false,
    disablePadding: false,
    label: '차량번호',
  },
  {
    id: 'exsLocgovNm',
    numeric: false,
    disablePadding: false,
    label: '전출관청',
  },
  {
    id: 'chgLocgovNm',
    numeric: false,
    disablePadding: false,
    label: '전입관청',
  },
  {
    id: 'dmndSeNm',
    numeric: false,
    disablePadding: false,
    label: '요청구분명',
  },
  {
    id: 'dmndLocgovNm',
    numeric: false,
    disablePadding: false,
    label: '요청관할관청',
  },
  {
    id: 'prcsSttsNm',
    numeric: false,
    disablePadding: false,
    label: '처리상태',
  },
]

// 목록 조회시 필요한 조건
type listSearchObj = {
  page: number
  size: number
  bgngDt: string
  endDt: string
  [key: string]: string | number // 인덱스 시그니처 추가
}
export interface ButtonGroupActionProps {
  onClickApproveBtn: () => void // 승인 버튼 action
  onClickDeclineBtn: () => void // 거절 버튼 action
  onClickCancelBtn: () => void // 취소 버튼 action
}



const TaxiPage = () => {
  
  const authInfo = getUserInfo();
  const [flag, setFlag] = useState<boolean|null>(null) // 데이터 갱신을 위한 플래그 설정
  const [rows, setRows] = useState<Row[]>([]) // 가져온 로우 데이터
  const [totalRows, setTotalRows] = useState(0) // 총 수
  const [loading, setLoading] = useState(false) // 로딩여부
  const [confirmOpen, setConfirmOpen] = useState(false) // 다이얼로그 상태
  const [selectedRow, setSelectedRow] = useState<Row|null>(null) // 선택된 Row를 저장할 state
  const [selectedIndex, setSelectedIndex] = useState<number>(-1)
  const [open, setOpen] = useState<boolean>(false)
  const [excelFlag, setExcelFlag] = useState<boolean>(false) // 조회조건 변경 시 엑셀기능 동작여부
  const [loadingBackdrop, setLoadingBackdrop] = useState(false) // 로딩상태
  const [pageable, setPageable] = useState<Pageable2>({pageNumber: 1, pageSize: 10, totalPages: 1 })
  const [params, setParams] = useState<listSearchObj>({
    page: 1,
    size: 10,
    bgngDt: '',
    endDt: ''
  }) // 목록 조회를 위한 객체 (쿼리스트링에서 조건 유무를 확인 하고 없으면 초기값 설정)
  
  const [authLocgovCd, setAuthLocgovCd] = useState<string>('');

  useEffect(() => {
    if (authInfo.locgovCd) {
      setAuthLocgovCd(authInfo.locgovCd);
    }
  }, [authInfo.locgovCd])
  
  // 플래그의 변화를 통해 현재 정보를 기준으로 데이터를 가져오기위해 설정
  useEffect(() => {
    if (flag != null) {
      setRows([])
      setTotalRows(0)
      setPageable({ pageNumber: 1, pageSize: 10, totalPages: 1 })
      setSelectedRow(null);
      setSelectedIndex(-1);
      fetchData()
    }
  }, [flag])

  // 초기 데이터 로드
  useEffect(() => {
    const dateRange = getDateRange('date', 30)

    let startDate = dateRange.startDate
    let endDate = dateRange.endDate

    setParams((prev) => ({ ...prev, bgngDt: startDate, endDt: endDate }))
  }, [])

  // Fetch를 통해 데이터 갱신
  const fetchData = async () => {
    
    if (!params.ctpvCd) {
      alert('시도명을 선택해주세요.')
      return
    }
    
    setSelectedIndex(-1)
    setSelectedRow(null)
    setLoading(true)
    setExcelFlag(true) // 엑셀기능 동작여부

    try {
      // 검색 조건에 맞는 endpoint 생성
      let endpoint: string =
        `/fsm/stn/ltmm/tx/getAllLgovMvtRequst?page=${params.page}&size=${params.size}` +
        `${params.ctpvCd ? '&ctpvCd=' + params.ctpvCd : ''}` +
        `${params.locgovCd ? '&locgovCd=' + params.locgovCd : ''}` +
        `${params.prcsSttsCd ? '&prcsSttsCd=' + params.prcsSttsCd : ''}` +
        `${params.bgngDt ? (('&bgngDt=' + (params.bgngDt + '').replaceAll('-', '')) as string) : ''}` +
        `${params.endDt ? (('&endDt=' + (params.endDt + '').replaceAll('-', '')) as string) : ''}` +
        `${params.vhclNo ? '&vhclNo=' + params.vhclNo : ''}` +
        `${params.brno ? '&brno=' + params.brno : ''}`

      const response = await sendHttpRequest('GET', endpoint, null, true, { cache: 'no-store' })

      if (response && response.resultType === 'success' && response.data) {
        // 데이터 조회 성공시
        setRows(response.data.content)
        setTotalRows(response.data.totalElements)
        setPageable({
          pageNumber: response.data.pageable.pageNumber + 1,
          pageSize: response.data.pageable.pageSize,
          totalPages: response.data.totalPages,
        })

        handleRowClick(response.data.content[0], 0);
      }
    } catch (error) {
      console.error('Error fetching data:', error)
    } finally {
      setLoading(false)
    }
  }

  // 상세정보에 있는 Button actions
  const buttonGroupActions: ButtonGroupActionProps = {
    // 승인 버튼 클릭 시 다이얼로그 오픈
    onClickApproveBtn: async function (): Promise<void> {
      handleActionClick('01')
    },

    //거절 버튼 클릭 시 다이얼로그 오픈
    onClickDeclineBtn: async function (): Promise<void> {
      handleActionClick('02')
    },

    // 취소 버튼 클릭 시 다이얼로그 오픈
    onClickCancelBtn: async function (): Promise<void> {
      handleActionClick('04')
    },
  }

  // 데이터 수정하는 메서드
  const putData = async (sttCode:string, rfslRsnCn?:string) => {
    
    setLoadingBackdrop(true);
    
    try {
      
      const endpoint = `/fsm/stn/ltmm/tx/updateLgovMvtRequst`
      const body = {
        brno: selectedRow?.brno,
        vhclNo: selectedRow?.vhclNo,        
        aplySn: selectedRow?.aplySn,
        chgLocgovCd: selectedRow?.chgLocgovCd,
        prcsSttsCd: sttCode,
        rfslRsnCn:rfslRsnCn ?? ''
      }

      const response = await sendHttpRequest('PUT', endpoint, body, true, { cache: 'no-store' });

      if (response && response.resultType === 'success') {
        alert(response.message);
        reload()
      } else {
        alert(response.message);
      }
    } catch (error) {
      console.error('Error fetching data:', error)
    } finally {
      setLoadingBackdrop(false);
    }
  }

  const excelDownload = async () => {
    if (rows.length == 0) {
      alert('엑셀파일을 다운로드할 데이터가 없습니다.')
      return
    }

    if (!excelFlag) {
      alert('조회조건이 변경되었습니다. 검색 후 다운로드가 가능합니다.')
      return
    }

    try {
      setLoadingBackdrop(true)
      let endpoint: string =
        `/fsm/stn/ltmm/tx/getExcelLgovMvtRequst?` +
        `${params.ctpvCd ? '&ctpvCd=' + params.ctpvCd : ''}` +
        `${params.locgovCd ? '&locgovCd=' + params.locgovCd : ''}` +
        `${params.prcsSttsCd ? '&prcsSttsCd=' + params.prcsSttsCd : ''}` +
        `${params.bgngDt ? (('&bgngDt=' + (params.bgngDt + '').replaceAll('-', '')) as string) : ''}` +
        `${params.endDt ? (('&endDt=' + (params.endDt + '').replaceAll('-', '')) as string) : ''}` +
        `${params.vhclNo ? '&vhclNo=' + params.vhclNo : ''}` +
        `${params.brno ? '&brno=' + params.brno : ''}`

        await  getExcelFile(
        endpoint,
        BCrumb[BCrumb.length - 1].title + '_' + getToday() + '.xlsx',
      )
    } catch (error) {
      console.error('ERROR :: ', error)
    } finally {
      setLoadingBackdrop(false)
    }
  }

  // 승인/거절/취소 버튼 클릭 시 다이얼로그 오픈
  const handleActionClick = (actionType: string) => {
    
    if (!(selectedRow?.prcsSttsCd == '00' && selectedRow?.exsLocgovCd === authLocgovCd)) {
      alert('본인 지자체만 처리 가능합니다.')
      return
    }

    if (actionType === '01' || actionType === '04') {

      const msg = actionType === '01' ? '관할관청 이관을 승인 하시겠습니까?' : '관할관청 전입요청을 취소 하시겠습니까?';

      if (confirm(msg)) {
        putData(actionType) 
      }      
    } else {
      setConfirmOpen(true) // 다이얼로그 오픈
    }
  }

  // 행 클릭 시 호출되는 함수
  const handleRowClick = useCallback((selectedRow: Row, index?: number) => {
    setSelectedIndex(index ?? -1)
    setSelectedRow(selectedRow)
  }, []);

  // 페이지 번호와 페이지 사이즈를 params에 업데이트
  const handlePaginationModelChange = useCallback((page: number, pageSize: number) => {
    setParams((prev) => ({ ...prev, page: page, size: pageSize }));
    setFlag(prev => !prev);
  }, []);

  // 검색시 검색 조건에 맞는 데이터 갱신 및 1페이지로 이동
  const handleAdvancedSearch = (event: React.FormEvent) => {
    event.preventDefault()
    setParams((prev) => ({ ...prev, page:1, size:10 })) // 첫 페이지로 이동
    setFlag(prev => !prev)
  }

  const reload = () => {
    setParams((prev) => ({ ...prev, page:1, size:10 })) // 첫 페이지로 이동
    setFlag(prev => !prev)
  }

  // 시작일과 종료일 비교 후 일자 변경
  const handleSearchChange = (
    event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>,
  ) => {
    const { name, value } = event.target

    if (name === 'bgngDt' || name === 'endDt') {
      const otherDateField = name === 'bgngDt' ? 'endDt' : 'bgngDt'
      const otherDate = params[otherDateField]

      if (isValidDateRange(name, value, otherDate)) {
        setExcelFlag(false)
        setParams((prev) => ({ ...prev, page: 1, [name]: value }))
      } else {
        setExcelFlag(false)
        alert('종료일은 시작일보다 빠를 수 없습니다.')
      }
    } else {
      setParams((prev) => ({ ...prev, page: 1, [name]: value }))
    }
  }

  // 시작일과 종료일 비교
  const isValidDateRange = (
    changedField: string,
    changedValue: string,
    otherValue: string | undefined,
  ): boolean => {
    if (!otherValue) return true

    const changedDate = new Date(changedValue)
    const otherDate = new Date(otherValue)

    if (changedField === 'bgngDt') {
      return changedDate <= otherDate
    } else {
      return changedDate >= otherDate
    }
  }

  return (
    <PageContainer
      title="지자체이관전출관리"
      description="지자체이관전출관리 페이지"
    >
      {/* 검색영역 시작 */}
      <Box component="form" onSubmit={handleAdvancedSearch} sx={{ mb: 2 }}>
        <Box className="sch-filter-box">
          <div className="filter-form">
            <div className="form-group">
              <CustomFormLabel
                className="input-label-display"
                htmlFor="sch-ctpv"
              >
                <span className="required-text">*</span>시도명
              </CustomFormLabel>
              <CtpvSelect
                pValue={params.ctpvCd}
                handleChange={handleSearchChange}
                htmlFor={'sch-ctpv'}
              />
            </div>
            <div className="form-group">
              <CustomFormLabel
                className="input-label-display"
                htmlFor="sch-locgov"
              >
                <span className="required-text">*</span>관할관청
              </CustomFormLabel>
              <LocgovSelect
                ctpvCd={params.ctpvCd}
                pValue={params.locgovCd}
                handleChange={handleSearchChange}
                htmlFor={'sch-locgov'}
              />
            </div>
            <div className="form-group">
              <CustomFormLabel
                className="input-label-display"
                htmlFor="ft-vhclNo"
              >
                차량번호
              </CustomFormLabel>
              <CustomTextField
                name="vhclNo"
                value={params.vhclNo ?? ''}
                onChange={handleSearchChange}
                type="text"
                id="ft-vhclNo"
                fullWidth
              />
            </div>
          </div>
          <hr></hr>
          {/* 신청일자 datePicker */}
          <div className="filter-form">
            <div className="form-group">
              <CustomFormLabel className="input-label-display">
                신청일자
              </CustomFormLabel>
              <CustomFormLabel
                className="input-label-none"
                htmlFor="ft-date-start"
              >
                신청 시작일
              </CustomFormLabel>
              <CustomTextField
                type="date"
                id="ft-date-start"
                name="bgngDt"
                value={params.bgngDt}
                onChange={handleSearchChange}
                fullWidth
              />
              ~
              <CustomFormLabel
                className="input-label-none"
                htmlFor="ft-date-end"
              >
                신청종료일
              </CustomFormLabel>
              <CustomTextField
                type="date"
                id="ft-date-end"
                name="endDt"
                value={params.endDt}
                onChange={handleSearchChange}
                fullWidth
              />
            </div>
            <div className="form-group">
              <CustomFormLabel
                className="input-label-display"
                htmlFor="sch-prcsSttsCd"
              >
                처리상태
              </CustomFormLabel>
              <CommSelect
                cdGroupNm="ITL0"
                pValue={params.prcsSttsCd}
                handleChange={handleSearchChange}
                pName="prcsSttsCd"
                htmlFor={'sch-prcsSttsCd'}
                addText='전체'
              />
            </div>
          </div>
        </Box>
        <Box className="table-bottom-button-group">
          <div className="button-right-align">
            <LoadingBackdrop open={loadingBackdrop} />
            <Button
              type="submit"
              variant="contained"
              color="primary"
            >
              검색
            </Button>
            <Button
              variant="contained"
              color="primary"
              onClick={() => setOpen(true)}
            >
              등록
            </Button>
            <Button
              onClick={() => excelDownload()}
              variant="contained"
              color="success"
            >
              엑셀
            </Button>
          </div>
        </Box>
      </Box>

      {/* 테이블영역 시작 */}
      <TableDataGrid
        headCells={headCells} // 테이블 헤더 값
        rows={rows} // 목록 데이터
        totalRows={totalRows} // 총 로우 수
        loading={loading} // 로딩여부
        onRowClick={handleRowClick} // 행 클릭 핸들러 추가
        selectedRowIndex={selectedIndex}
        onPaginationModelChange={handlePaginationModelChange} // 페이지 , 사이즈 변경 핸들러 추가
        pageable={pageable} // 현재 페이지 / 사이즈 정보
        paging={true}
        cursor={true}
        caption={"택시 지자체이관전출관리 조회 목록"}
      />
      {/* 테이블영역 끝 */}

      <>
        {/* 상세 영역 시작*/}
        {selectedRow && (
          <BlankCard className="contents-card" title="상세 정보"
            buttons={[
              {
                label: '승인',
                disabled: !(selectedRow.prcsSttsCd == '00' && selectedRow.dmndSeCd == '1' && selectedRow.exsLocgovCd === authLocgovCd),
                onClick: () => buttonGroupActions.onClickApproveBtn(),
                color: 'outlined',
              },
              {
                label: '거절',
                disabled: !(selectedRow.prcsSttsCd == '00' && selectedRow.dmndSeCd == '1' && selectedRow.exsLocgovCd === authLocgovCd),
                onClick: () => buttonGroupActions.onClickDeclineBtn(),
                color: 'outlined',
              },
              {
                label: '취소',
                disabled: !(selectedRow.prcsSttsCd == '00' && selectedRow.dmndSeCd == '1' && selectedRow.exsLocgovCd === authLocgovCd),
                onClick: () => buttonGroupActions.onClickCancelBtn(),
                color: 'outlined',
              },
            ]}
          >
            <DetailDataGrid
              data={selectedRow}
            />
          </BlankCard>
        )}
        {/* 상세 영역 끝 */}
      </>

      <>
        {open ? (
          <FormModal
            isOpen={open}
            setOpen={setOpen}
            reload={() => reload()}
          />
        ) : null}
      </>

      <>      
        {confirmOpen ? (
          <ConfirmModal
            putData={putData}
            confirmOpen={confirmOpen}
            setConfirmOpen={setConfirmOpen}
          />
        ) : null}
      </>

    </PageContainer>
  )
}

export default TaxiPage
